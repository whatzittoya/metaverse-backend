"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const knex_1 = __importDefault(require("knex"));
const knex_mock_client_1 = require("knex-mock-client");
const services_1 = require("../../src/services");
jest.mock('../../src/database/index', () => {
    return { getDatabaseClient: jest.fn().mockReturnValue('postgres') };
});
jest.requireMock('../../src/database/index');
class Client_PG extends knex_mock_client_1.MockClient {
}
describe('Integration Tests', () => {
    let db;
    let tracker;
    beforeAll(async () => {
        db = (0, knex_1.default)({ client: Client_PG });
        tracker = (0, knex_mock_client_1.getTracker)();
    });
    afterEach(() => {
        tracker.reset();
        jest.clearAllMocks();
    });
    describe('Services / Specifications', () => {
        describe('oas', () => {
            describe('generate', () => {
                let service;
                beforeEach(() => {
                    service = new services_1.SpecificationService({
                        knex: db,
                        schema: { collections: {}, relations: [] },
                    });
                });
                it('returns untyped schema for json fields', async () => {
                    var _a;
                    jest.spyOn(services_1.CollectionsService.prototype, 'readByQuery').mockImplementation(jest.fn().mockReturnValue([
                        {
                            collection: 'test_table',
                            meta: {
                                accountability: 'all',
                                collection: 'test_table',
                                group: null,
                                hidden: false,
                                icon: null,
                                item_duplication_fields: null,
                                note: null,
                                singleton: false,
                                translations: null,
                            },
                            schema: {
                                name: 'test_table',
                            },
                        },
                    ]));
                    jest.spyOn(services_1.FieldsService.prototype, 'readAll').mockImplementation(jest.fn().mockReturnValue([
                        {
                            collection: 'test_table',
                            field: 'id',
                            type: 'integer',
                            schema: {
                                is_nullable: false,
                            },
                        },
                        {
                            collection: 'test_table',
                            field: 'blob',
                            type: 'json',
                            schema: {
                                is_nullable: true,
                            },
                        },
                    ]));
                    jest.spyOn(services_1.RelationsService.prototype, 'readAll').mockImplementation(jest.fn().mockReturnValue([]));
                    const spec = await service.oas.generate();
                    expect((_a = spec.components) === null || _a === void 0 ? void 0 : _a.schemas).toEqual({
                        ItemsTestTable: {
                            type: 'object',
                            properties: {
                                id: {
                                    nullable: false,
                                    type: 'integer',
                                },
                                blob: {
                                    nullable: true,
                                },
                            },
                            'x-collection': 'test_table',
                        },
                    });
                });
            });
        });
    });
});
