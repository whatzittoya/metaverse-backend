"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const validate_payload_1 = require("./validate-payload");
(0, vitest_1.describe)('validatePayload', () => {
    (0, vitest_1.it)('returns an empty array when there are no errors', () => {
        const mockFilter = { _and: [{ field: { _eq: 'field' } }] };
        const mockPayload = { field: 'field' };
        (0, vitest_1.expect)((0, validate_payload_1.validatePayload)(mockFilter, mockPayload)).toStrictEqual([]);
    });
    (0, vitest_1.it)('returns an array of 1 when there errors with an _and operator', () => {
        const mockFilter = { _and: [{ field: { _eq: 'field' } }] };
        const mockPayload = { field: 'test' };
        (0, vitest_1.expect)((0, validate_payload_1.validatePayload)(mockFilter, mockPayload)).toHaveLength(1);
    });
    (0, vitest_1.it)('returns an array of 1 when there errors with an _or operator', () => {
        const mockFilter = { _or: [{ field: { _eq: 'field' } }] };
        const mockPayload = { field: 'test' };
        (0, vitest_1.expect)((0, validate_payload_1.validatePayload)(mockFilter, mockPayload)).toHaveLength(1);
    });
    (0, vitest_1.it)('returns an array of 1 when there errors with an _or containing _and operators', () => {
        const mockFilter = {
            _or: [
                {
                    _and: [{ a: { _eq: 1 } }, { b: { _eq: 1 } }],
                },
                {
                    _and: [{ a: { _eq: 2 } }, { b: { _eq: 2 } }],
                },
            ],
        };
        (0, vitest_1.expect)((0, validate_payload_1.validatePayload)(mockFilter, {
            a: 0,
            b: 0,
        })).toHaveLength(4);
        (0, vitest_1.expect)((0, validate_payload_1.validatePayload)(mockFilter, {
            a: 0,
            b: 1,
        })).toHaveLength(3);
        (0, vitest_1.expect)((0, validate_payload_1.validatePayload)(mockFilter, {
            a: 1,
            b: 2,
        })).toHaveLength(2);
        (0, vitest_1.expect)((0, validate_payload_1.validatePayload)(mockFilter, {
            a: 1,
            b: 1,
        })).toHaveLength(0);
        (0, vitest_1.expect)((0, validate_payload_1.validatePayload)(mockFilter, {
            a: 2,
            b: 2,
        })).toHaveLength(0);
    });
});
