"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const compress_1 = require("./compress");
const plain = {
    string: 'directus',
    true: true,
    false: false,
    null: null,
    empty: '',
    integer: 2022,
    float: 12.34,
    undefined: undefined,
};
const deep = {
    another: plain,
    nested: plain,
    arr: [plain, plain],
};
const arr = ['directus', false, deep];
const geoJSON = {
    data: [
        {
            id: 'f36431ea-0d25-4747-8b37-185eb3ba66d0',
            point1: {
                type: 'Point',
                coordinates: [-107.57812499999984, 34.30714385628873],
            },
            point2: {
                type: 'Point',
                coordinates: [-91.25923790168956, 42.324763327278106],
            },
        },
    ],
};
const dateString = '2022-02-14T01:02:11.000Z';
const dateInput = {
    date_created: new Date(dateString),
};
const dateOutput = {
    date_created: dateString,
};
(0, vitest_1.describe)('compress', () => {
    (0, vitest_1.test)('Compresses plain objects', () => {
        (0, vitest_1.expect)((0, compress_1.compress)(plain)).toBe('string|directus|true|false|null|empty|integer|float|undefined^1K6^12.34^$0|1|2|-1|3|-2|4|-3|5|-4|6|9|7|A|8|-5]');
    });
    (0, vitest_1.test)('Compresses deep nested objects', () => {
        (0, vitest_1.expect)((0, compress_1.compress)(deep)).toBe('another|string|directus|true|false|null|empty|integer|float|undefined|nested|arr^1K6^12.34^$0|$1|2|3|-1|4|-2|5|-3|6|-4|7|C|8|D|9|-5]|A|$1|2|3|-1|4|-2|5|-3|6|-4|7|C|8|D|9|-5]|B|@$1|2|3|-1|4|-2|5|-3|6|-4|7|C|8|D|9|-5]|$1|2|3|-1|4|-2|5|-3|6|-4|7|C|8|D|9|-5]]]');
    });
    (0, vitest_1.test)('Compresses array input', () => {
        (0, vitest_1.expect)((0, compress_1.compress)(arr)).toBe('directus|another|string|true|false|null|empty|integer|float|undefined|nested|arr^1K6^12.34^@0|-2|$1|$2|0|3|-1|4|-2|5|-3|6|-4|7|C|8|D|9|-5]|A|$2|0|3|-1|4|-2|5|-3|6|-4|7|C|8|D|9|-5]|B|@$2|0|3|-1|4|-2|5|-3|6|-4|7|C|8|D|9|-5]|$2|0|3|-1|4|-2|5|-3|6|-4|7|C|8|D|9|-5]]]]');
    });
    (0, vitest_1.test)('Compresses GeoJSON format reliably', () => {
        (0, vitest_1.expect)((0, compress_1.compress)(geoJSON)).toBe('data|id|f36431ea-0d25-4747-8b37-185eb3ba66d0|point1|type|Point|coordinates|point2^^-107.57812499999984|34.30714385628873|-91.25923790168956|42.324763327278106^$0|@$1|2|3|$4|5|6|@8|9]]|7|$4|5|6|@A|B]]]]]');
    });
    (0, vitest_1.test)('Compresses Date objects into strings', () => {
        (0, vitest_1.expect)((0, compress_1.compress)(dateInput)).toBe('date_created|2022-02-14T01:02:11.000Z^^^$0|1]');
    });
    (0, vitest_1.test)('Throws error on non-supported types', () => {
        (0, vitest_1.expect)(() => (0, compress_1.compress)({ method: () => true })).toThrowError();
    });
});
(0, vitest_1.describe)('decompress', () => {
    (0, vitest_1.test)('Decompresses plain objects', () => {
        (0, vitest_1.expect)((0, compress_1.decompress)('string|directus|true|false|null|empty|integer|float|undefined^1K6^12.34^$0|1|2|-1|3|-2|4|-3|5|-4|6|9|7|A|8|-5]')).toEqual(plain);
    });
    (0, vitest_1.test)('Decompresses deep nested objects', () => {
        (0, vitest_1.expect)((0, compress_1.decompress)('another|string|directus|true|false|null|empty|integer|float|undefined|nested|arr^1K6^12.34^$0|$1|2|3|-1|4|-2|5|-3|6|-4|7|C|8|D|9|-5]|A|$1|2|3|-1|4|-2|5|-3|6|-4|7|C|8|D|9|-5]|B|@$1|2|3|-1|4|-2|5|-3|6|-4|7|C|8|D|9|-5]|$1|2|3|-1|4|-2|5|-3|6|-4|7|C|8|D|9|-5]]]')).toEqual(deep);
    });
    (0, vitest_1.test)('Decompresses arrays', () => {
        (0, vitest_1.expect)((0, compress_1.decompress)('directus|another|string|true|false|null|empty|integer|float|undefined|nested|arr^1K6^12.34^@0|-2|$1|$2|0|3|-1|4|-2|5|-3|6|-4|7|C|8|D|9|-5]|A|$2|0|3|-1|4|-2|5|-3|6|-4|7|C|8|D|9|-5]|B|@$2|0|3|-1|4|-2|5|-3|6|-4|7|C|8|D|9|-5]|$2|0|3|-1|4|-2|5|-3|6|-4|7|C|8|D|9|-5]]]]')).toEqual(arr);
    });
    (0, vitest_1.test)('Decompresses GeoJSON properly', () => {
        (0, vitest_1.expect)((0, compress_1.decompress)('data|id|f36431ea-0d25-4747-8b37-185eb3ba66d0|point1|type|Point|coordinates|point2^^-107.57812499999984|34.30714385628873|-91.25923790168956|42.324763327278106^$0|@$1|2|3|$4|5|6|@8|9]]|7|$4|5|6|@A|B]]]]]')).toEqual(geoJSON);
    });
    (0, vitest_1.test)('Decompresses Date strings', () => {
        (0, vitest_1.expect)((0, compress_1.decompress)('date_created|2022-02-14T01:02:11.000Z^^^$0|1]')).toEqual(dateOutput);
    });
    (0, vitest_1.test)('Errors when not enough parts exist', () => {
        (0, vitest_1.expect)(() => (0, compress_1.decompress)('a|b^1K6^')).toThrowError();
    });
    (0, vitest_1.test)('Errors on illegal ending token', () => {
        (0, vitest_1.expect)(() => (0, compress_1.decompress)('^^^]')).toThrowError();
    });
});
(0, vitest_1.describe)('mapToSortedArray', () => {
    (0, vitest_1.test)('Returns map as array sorted by map values', () => {
        (0, vitest_1.expect)((0, compress_1.mapToSortedArray)(new Map([
            ['b', 1],
            ['a', 0],
            ['c', 2],
        ]))).toEqual(['a', 'b', 'c']);
    });
});
(0, vitest_1.describe)('encode', () => {
    (0, vitest_1.test)('Encodes special characters used in compressed string to URL encoded', () => {
        const input = 'hello + | ^ % end';
        (0, vitest_1.expect)((0, compress_1.encode)(input)).toBe('hello+%2B+%7C+%5E+%25+end');
    });
});
(0, vitest_1.describe)('decode', () => {
    (0, vitest_1.test)('Decodes special characters used in decompressed string to URL encoded', () => {
        const input = 'hello+%2B+%7C+%5E+%25+end';
        (0, vitest_1.expect)((0, compress_1.decode)(input)).toBe('hello + | ^ % end');
    });
});
(0, vitest_1.describe)('to36', () => {
    (0, vitest_1.test)('Converts base10 number to capitalized base36 equivalent', () => {
        (0, vitest_1.expect)((0, compress_1.to36)(23)).toBe('N');
        (0, vitest_1.expect)((0, compress_1.to36)(506999)).toBe('AV7B');
        (0, vitest_1.expect)((0, compress_1.to36)(3226393)).toBe('1X5I1');
    });
});
(0, vitest_1.describe)('to10', () => {
    (0, vitest_1.test)('Converts base36 number to capitalized base10 equivalent', () => {
        (0, vitest_1.expect)((0, compress_1.to10)('N')).toBe(23);
        (0, vitest_1.expect)((0, compress_1.to10)('AV7B')).toBe(506999);
        (0, vitest_1.expect)((0, compress_1.to10)('1X5I1')).toBe(3226393);
    });
});
(0, vitest_1.describe)('getValueForToken', () => {
    (0, vitest_1.test)('Returns correct values for tokens', () => {
        (0, vitest_1.expect)((0, compress_1.getValueForToken)(-1)).toBe(true);
        (0, vitest_1.expect)((0, compress_1.getValueForToken)(-2)).toBe(false);
        (0, vitest_1.expect)((0, compress_1.getValueForToken)(-3)).toBe(null);
        (0, vitest_1.expect)((0, compress_1.getValueForToken)(-4)).toBe('');
        (0, vitest_1.expect)((0, compress_1.getValueForToken)(-5)).toBe(undefined);
    });
});
