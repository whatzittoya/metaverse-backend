"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const vue_1 = require("vue");
const define_extension_1 = require("./define-extension");
const mockComponent = (0, vue_1.defineComponent)({});
const mockHandler = () => {
    return '';
};
(0, vitest_1.describe)('define-extensions', () => {
    const types = [];
    const mockRecord = () => {
        return { test: 'test' };
    };
    const interfaceConfig = {
        id: '1',
        name: 'test',
        icon: 'icon',
        component: mockComponent,
        types: types,
        options: null,
    };
    const displayConfig = { id: '1', name: 'test', icon: 'icon', component: mockComponent, types: types, options: null };
    const layoutConfig = {
        id: '1',
        name: 'test',
        icon: 'icon',
        component: mockComponent,
        slots: { options: mockComponent, sidebar: mockComponent, actions: mockComponent },
        setup: mockRecord,
    };
    const moduleConfig = {
        id: '1',
        name: 'test',
        icon: 'icon',
        routes: [],
    };
    const panelConfig = {
        id: '1',
        name: 'test',
        icon: 'icon',
        component: mockComponent,
        options: null,
        minWidth: 2,
        minHeight: 2,
    };
    const hookHandler = () => {
        return { test: (..._values) => undefined };
    };
    const endpointConfig = { id: '1', handler: mockHandler };
    const operationAppConfig = {
        id: '1',
        name: 'test',
        icon: 'icon',
        overview: null,
        options: null,
    };
    const operationApiConfig = {
        id: '1',
        handler: mockHandler,
    };
    (0, vitest_1.it)('return an interface config', () => {
        (0, vitest_1.expect)((0, define_extension_1.defineInterface)(interfaceConfig)).toBe(interfaceConfig);
    });
    (0, vitest_1.it)('return a display config', () => {
        (0, vitest_1.expect)((0, define_extension_1.defineDisplay)(displayConfig)).toBe(displayConfig);
    });
    (0, vitest_1.it)('return a layout config', () => {
        (0, vitest_1.expect)((0, define_extension_1.defineLayout)(layoutConfig)).toBe(layoutConfig);
    });
    (0, vitest_1.it)('return a module config', () => {
        (0, vitest_1.expect)((0, define_extension_1.defineModule)(moduleConfig)).toBe(moduleConfig);
    });
    (0, vitest_1.it)('return a panel config', () => {
        (0, vitest_1.expect)((0, define_extension_1.definePanel)(panelConfig)).toBe(panelConfig);
    });
    (0, vitest_1.it)('return a hook config', () => {
        (0, vitest_1.expect)((0, define_extension_1.defineHook)(hookHandler)).toBe(hookHandler);
    });
    (0, vitest_1.it)('return an endpoint config', () => {
        (0, vitest_1.expect)((0, define_extension_1.defineEndpoint)(endpointConfig)).toBe(endpointConfig);
    });
    (0, vitest_1.it)('return an operation App config', () => {
        (0, vitest_1.expect)((0, define_extension_1.defineOperationApp)(operationAppConfig)).toBe(operationAppConfig);
    });
    (0, vitest_1.it)('return an operation API config', () => {
        (0, vitest_1.expect)((0, define_extension_1.defineOperationApi)(operationApiConfig)).toBe(operationApiConfig);
    });
});
