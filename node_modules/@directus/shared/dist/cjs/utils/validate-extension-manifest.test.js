"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const validate_extension_manifest_1 = require("./validate-extension-manifest");
(0, vitest_1.describe)('', () => {
    (0, vitest_1.it)('returns false when passed item has no name or version', () => {
        (0, vitest_1.expect)((0, validate_extension_manifest_1.validateExtensionManifest)({})).toBe(false);
    });
    (0, vitest_1.it)('returns false when passed item has no EXTENSION_PKG_KEY', () => {
        const mockExtension = { name: 'test', version: '0.1' };
        (0, vitest_1.expect)((0, validate_extension_manifest_1.validateExtensionManifest)(mockExtension)).toBe(false);
    });
    (0, vitest_1.it)('returns false when passed item has no type', () => {
        const mockExtension = { name: 'test', version: '0.1', 'directus:extension': {} };
        (0, vitest_1.expect)((0, validate_extension_manifest_1.validateExtensionManifest)(mockExtension)).toBe(false);
    });
    (0, vitest_1.it)('returns false when passed item has an invalid type', () => {
        const mockExtension = {
            name: 'test',
            version: '0.1',
            'directus:extension': { type: 'not_extension_type' },
        };
        (0, vitest_1.expect)((0, validate_extension_manifest_1.validateExtensionManifest)(mockExtension)).toBe(false);
    });
    (0, vitest_1.it)('returns false when passed item has a package type and has no host', () => {
        const mockExtension = {
            name: 'test',
            version: '0.1',
            'directus:extension': { type: 'pack' },
        };
        (0, vitest_1.expect)((0, validate_extension_manifest_1.validateExtensionManifest)(mockExtension)).toBe(false);
    });
    (0, vitest_1.it)('returns false when passed item has a hybrid type and has no path, source, host or they have the wrong format', () => {
        const mockExtension = {
            name: 'test',
            version: '0.1',
            'directus:extension': { type: 'operation' },
        };
        (0, vitest_1.expect)((0, validate_extension_manifest_1.validateExtensionManifest)(mockExtension)).toBe(false);
    });
    (0, vitest_1.it)('returns false when passed item has an App or API type and has no path, source or host', () => {
        const mockExtension = {
            name: 'test',
            version: '0.1',
            'directus:extension': { type: 'interface' },
        };
        (0, vitest_1.expect)((0, validate_extension_manifest_1.validateExtensionManifest)(mockExtension)).toBe(false);
    });
    (0, vitest_1.it)('returns false when passed item has a type other than pack and has no path, source or host', () => {
        const mockExtension = {
            name: 'test',
            version: '0.1',
            'directus:extension': { type: 'interface' },
        };
        (0, vitest_1.expect)((0, validate_extension_manifest_1.validateExtensionManifest)(mockExtension)).toBe(false);
    });
    (0, vitest_1.it)('returns true when passed a valid ExtensionManifest with an App or API type', () => {
        const mockExtension = {
            name: 'test',
            version: '0.1',
            'directus:extension': { type: 'interface', path: './dist/index.js', source: './src/index.js', host: '^9.0.0' },
        };
        (0, vitest_1.expect)((0, validate_extension_manifest_1.validateExtensionManifest)(mockExtension)).toBe(true);
    });
    (0, vitest_1.it)('returns true when passed a valid ExtensionManifest with a hybrid type', () => {
        const mockExtension = {
            name: 'test',
            version: '0.1',
            'directus:extension': {
                type: 'operation',
                path: { app: './dist/app.js', api: './dist/api.js' },
                source: { app: './src/app.js', api: './src/api.js' },
                host: '^9.0.0',
            },
        };
        (0, vitest_1.expect)((0, validate_extension_manifest_1.validateExtensionManifest)(mockExtension)).toBe(true);
    });
    (0, vitest_1.it)('returns true when passed a valid ExtensionManifest with a package type', () => {
        const mockExtension = {
            name: 'test',
            version: '0.1',
            'directus:extension': { type: 'pack', host: '^9.0.0' },
        };
        (0, vitest_1.expect)((0, validate_extension_manifest_1.validateExtensionManifest)(mockExtension)).toBe(true);
    });
});
