"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const abbreviate_number_1 = require("./abbreviate-number");
(0, vitest_1.describe)('when no unit is given', () => {
    (0, vitest_1.it)('when under 1000', () => {
        (0, vitest_1.expect)((0, abbreviate_number_1.abbreviateNumber)(0.78, 2)).toBe('0.78');
    });
    (0, vitest_1.it)('when a number over 1000 is given', () => {
        (0, vitest_1.expect)((0, abbreviate_number_1.abbreviateNumber)(7008, 0)).toBe('7K');
    });
    (0, vitest_1.it)('when negative number is given', () => {
        (0, vitest_1.expect)((0, abbreviate_number_1.abbreviateNumber)(-7008, 0)).toBe('-7K');
    });
});
(0, vitest_1.describe)('when unit M is given', () => {
    (0, vitest_1.it)('when under 1000', () => {
        (0, vitest_1.expect)((0, abbreviate_number_1.abbreviateNumber)(0.78, 2, ['M'])).toBe('0.78');
    });
    (0, vitest_1.it)('when over 1000', () => {
        (0, vitest_1.expect)((0, abbreviate_number_1.abbreviateNumber)(8000, 0, ['M'])).toBe('8M');
    });
    (0, vitest_1.it)('when negative', () => {
        (0, vitest_1.expect)((0, abbreviate_number_1.abbreviateNumber)(-7008, 0, ['M'])).toBe('-7M');
    });
});
(0, vitest_1.describe)('when multiple units(["M","T"]) are given', () => {
    (0, vitest_1.it)('when under 1000', () => {
        (0, vitest_1.expect)((0, abbreviate_number_1.abbreviateNumber)(0.78, 2, ['M', 'T'])).toBe('0.78');
    });
    (0, vitest_1.it)('when number is over 1000', () => {
        (0, vitest_1.expect)((0, abbreviate_number_1.abbreviateNumber)(7008, 0, ['M', 'T'])).toBe('7M');
    });
    (0, vitest_1.it)('returns a string representation of the rounded number when negative', () => {
        (0, vitest_1.expect)((0, abbreviate_number_1.abbreviateNumber)(-7008, 0, ['M', 'T'])).toBe('-7M');
    });
});
