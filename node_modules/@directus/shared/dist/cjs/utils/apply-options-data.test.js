"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const apply_options_data_1 = require("./apply-options-data");
(0, vitest_1.describe)('applyOptionsData', () => {
    (0, vitest_1.it)('returns an empty object if the options are empty', () => {
        (0, vitest_1.expect)((0, apply_options_data_1.applyOptionsData)({}, {})).toEqual({});
    });
    (0, vitest_1.it)('returns the unchanged options if there are no mustaches', () => {
        (0, vitest_1.expect)((0, apply_options_data_1.applyOptionsData)({ str: 'num', arr: ['arr', { null: null }], obj: { str: 'obj', num: 42 } }, { num: 42, arr: ['foo', 'bar'], obj: { foo: 'bar' } })).toEqual({ str: 'num', arr: ['arr', { null: null }], obj: { str: 'obj', num: 42 } });
    });
    (0, vitest_1.it)('returns the options with any raw template replaced by the value in scope', () => {
        (0, vitest_1.expect)((0, apply_options_data_1.applyOptionsData)({ str: '{{ num }}', arr: ['{{ arr }}', { null: null }], obj: { str: '{{ obj }}', num: 42 } }, { num: 42, arr: ['foo', 'bar'], obj: { foo: 'bar' } })).toEqual({ str: 42, arr: [['foo', 'bar'], { null: null }], obj: { str: { foo: 'bar' }, num: 42 } });
    });
    (0, vitest_1.it)('returns the options with any non-raw template rendered with the respective stringified values from the scope', () => {
        (0, vitest_1.expect)((0, apply_options_data_1.applyOptionsData)({ str: 'num: {{ num }}', arr: ['arr: {{ arr }}', { null: null }], obj: { str: 'obj: {{ obj }}', num: 42 } }, { num: 42, arr: ['foo', 'bar'], obj: { foo: 'bar' } })).toEqual({
            str: 'num: 42',
            arr: ['arr: ["foo","bar"]', { null: null }],
            obj: { str: 'obj: {"foo":"bar"}', num: 42 },
        });
    });
    (0, vitest_1.it)('returns the options with raw templates with null scope values as literal null and undefined scope values as string undefined', () => {
        (0, vitest_1.expect)((0, apply_options_data_1.applyOptionsData)({ null: '{{ null }}', undefined: '{{ undefined }}' }, { null: null })).toEqual({
            null: null,
            undefined: 'undefined',
        });
    });
    (0, vitest_1.it)('returns the options with non-raw templates which reference null or undefined scope values as literal null and undefined strings', () => {
        (0, vitest_1.expect)((0, apply_options_data_1.applyOptionsData)({ null: 'null: {{ null }}', undefined: 'undefined: {{ undefined }}' }, { null: null })).toEqual({
            null: 'null: null',
            undefined: 'undefined: undefined',
        });
    });
    (0, vitest_1.it)('does not skip values in a template if they are not undefined', () => {
        (0, vitest_1.expect)((0, apply_options_data_1.applyOptionsData)({ skip: '{{ num }}', keep: '{{ num }}' }, { num: 42 }, ['skip'])).toEqual({
            skip: 42,
            keep: 42,
        });
        (0, vitest_1.expect)((0, apply_options_data_1.applyOptionsData)({ skip: 'num: {{ num }}', keep: 'num: {{ num }}' }, { num: 42 }, ['skip'])).toEqual({
            skip: 'num: 42',
            keep: 'num: 42',
        });
    });
    (0, vitest_1.it)('skips over values in a template which are undefined', () => {
        (0, vitest_1.expect)((0, apply_options_data_1.applyOptionsData)({ skip: '{{ num }}', keep: '{{ num }}' }, {}, ['skip'])).toEqual({
            skip: '{{ num }}',
            keep: 'undefined',
        });
        (0, vitest_1.expect)((0, apply_options_data_1.applyOptionsData)({ skip: 'num: {{ num }}', keep: 'num: {{ num }}' }, {}, ['skip'])).toEqual({
            skip: 'num: {{ num }}',
            keep: 'num: undefined',
        });
    });
});
(0, vitest_1.describe)('optionToObject', () => {
    (0, vitest_1.it)('returns the option parsed from json if the option is a string', () => {
        (0, vitest_1.expect)((0, apply_options_data_1.optionToObject)('{ "foo": 42 }')).toEqual({ foo: 42 });
    });
    (0, vitest_1.it)('returns the unchanged option if it is not a string', () => {
        (0, vitest_1.expect)((0, apply_options_data_1.optionToObject)(['foo', 42])).toEqual(['foo', 42]);
    });
});
(0, vitest_1.describe)('optionToObject', () => {
    (0, vitest_1.it)('returns the option stringified to json if it is an object or array', () => {
        (0, vitest_1.expect)((0, apply_options_data_1.optionToString)({ foo: 42 })).toBe('{"foo":42}');
    });
    (0, vitest_1.it)('returns the option converted to a string if it is not an object or array', () => {
        (0, vitest_1.expect)((0, apply_options_data_1.optionToString)(42)).toBe('42');
    });
});
