import { Knex } from 'knex';
import { Logger } from 'pino';
import { Ref } from 'vue';
import { API_EXTENSION_TYPES, APP_EXTENSION_TYPES, EXTENSION_PACKAGE_TYPES, EXTENSION_PKG_KEY, EXTENSION_TYPES, HYBRID_EXTENSION_TYPES, LOCAL_TYPES, PACKAGE_EXTENSION_TYPES } from '../constants';
import { Accountability } from './accountability';
import { InterfaceConfig } from './interfaces';
import { DisplayConfig } from './displays';
import { LayoutConfig } from './layouts';
import { ModuleConfig } from './modules';
import { PanelConfig } from './panels';
import { DeepPartial } from './misc';
import { Field } from './fields';
import { Relation } from './relations';
import { Collection } from './collection';
import { SchemaOverview } from './schema';
export declare type AppExtensionType = typeof APP_EXTENSION_TYPES[number];
export declare type ApiExtensionType = typeof API_EXTENSION_TYPES[number];
export declare type HybridExtensionType = typeof HYBRID_EXTENSION_TYPES[number];
export declare type ExtensionType = typeof EXTENSION_TYPES[number];
export declare type PackageExtensionType = typeof PACKAGE_EXTENSION_TYPES[number];
export declare type ExtensionPackageType = typeof EXTENSION_PACKAGE_TYPES[number];
declare type ExtensionCommon = {
    path: string;
    name: string;
};
declare type AppExtensionCommon = {
    type: AppExtensionType;
    entrypoint: string;
};
declare type ApiExtensionCommon = {
    type: ApiExtensionType;
    entrypoint: string;
};
declare type HybridExtensionCommon = {
    type: HybridExtensionType;
    entrypoint: {
        app: string;
        api: string;
    };
};
declare type PackageExtensionCommon = {
    type: PackageExtensionType;
    children: string[];
};
declare type ExtensionLocalCommon = ExtensionCommon & {
    local: true;
};
declare type ExtensionPackageCommon = ExtensionCommon & {
    version: string;
    host: string;
    local: false;
};
export declare type ExtensionLocal = ExtensionLocalCommon & (AppExtensionCommon | ApiExtensionCommon | HybridExtensionCommon);
export declare type ExtensionPackage = ExtensionPackageCommon & (AppExtensionCommon | ApiExtensionCommon | HybridExtensionCommon | PackageExtensionCommon);
export declare type AppExtension = AppExtensionCommon & (ExtensionLocalCommon | ExtensionPackageCommon);
export declare type ApiExtension = ApiExtensionCommon & (ExtensionLocalCommon | ExtensionPackageCommon);
export declare type HybridExtension = HybridExtensionCommon & (ExtensionLocalCommon | ExtensionPackageCommon);
export declare type Extension = ExtensionLocal | ExtensionPackage;
export declare type ExtensionManifestRaw = {
    name?: string;
    version?: string;
    dependencies?: Record<string, string>;
    [EXTENSION_PKG_KEY]?: {
        type?: string;
        path?: string | {
            app: string;
            api: string;
        };
        source?: string | {
            app: string;
            api: string;
        };
        host?: string;
        hidden?: boolean;
    };
};
declare type ExtensionOptionsCommon = {
    host: string;
    hidden?: boolean;
};
declare type ExtensionOptionsAppOrApi = {
    type: AppExtensionType | ApiExtensionType;
    path: string;
    source: string;
};
declare type ExtensionOptionsHybrid = {
    type: HybridExtensionType;
    path: {
        app: string;
        api: string;
    };
    source: {
        app: string;
        api: string;
    };
};
declare type ExtensionOptionsPackage = {
    type: PackageExtensionType;
};
export declare type ExtensionOptions = ExtensionOptionsCommon & (ExtensionOptionsAppOrApi | ExtensionOptionsHybrid | ExtensionOptionsPackage);
export declare type ExtensionManifest = {
    name: string;
    version: string;
    dependencies?: Record<string, string>;
    [EXTENSION_PKG_KEY]: ExtensionOptions;
};
export declare type AppExtensionConfigs = {
    interfaces: Ref<InterfaceConfig[]>;
    displays: Ref<DisplayConfig[]>;
    layouts: Ref<LayoutConfig[]>;
    modules: Ref<ModuleConfig[]>;
    panels: Ref<PanelConfig[]>;
};
export declare type ApiExtensionContext = {
    services: any;
    exceptions: any;
    database: Knex;
    env: Record<string, any>;
    logger: Logger;
    getSchema: (options?: {
        accountability?: Accountability;
        database?: Knex;
    }) => Promise<SchemaOverview>;
};
export declare type ExtensionOptionsContext = {
    collection: string | undefined;
    editing: string;
    field: DeepPartial<Field>;
    relations: {
        m2o: DeepPartial<Relation> | undefined;
        m2a?: DeepPartial<Relation> | undefined;
        o2m: DeepPartial<Relation> | undefined;
    };
    collections: {
        junction: DeepPartial<Collection & {
            fields: DeepPartial<Field>[];
        }> | undefined;
        related: DeepPartial<Collection & {
            fields: DeepPartial<Field>[];
        }> | undefined;
    };
    fields: {
        corresponding: DeepPartial<Field> | undefined;
        junctionCurrent: DeepPartial<Field> | undefined;
        junctionRelated: DeepPartial<Field> | undefined;
        sort: DeepPartial<Field> | undefined;
    };
    items: Record<string, Record<string, any>[]>;
    localType: typeof LOCAL_TYPES[number];
    autoGenerateJunctionRelation: boolean;
    saving: boolean;
};
export {};
//# sourceMappingURL=extensions.d.ts.map