"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const execa_1 = __importDefault(require("execa"));
const ora_1 = __importDefault(require("ora"));
const constants_1 = require("@directus/shared/constants");
const utils_1 = require("@directus/shared/utils");
const logger_1 = require("../utils/logger");
const languages_1 = require("../utils/languages");
const rename_map_1 = __importDefault(require("../utils/rename-map"));
const get_package_version_1 = __importDefault(require("../utils/get-package-version"));
const pkg = require('../../../../package.json');
const TEMPLATE_PATH = path_1.default.resolve(__dirname, '../../../../templates');
async function create(type, name, options) {
    const targetDir = name.substring(name.lastIndexOf('/') + 1);
    const targetPath = path_1.default.resolve(targetDir);
    if (!(0, utils_1.isIn)(type, constants_1.EXTENSION_TYPES)) {
        (0, logger_1.log)(`Extension type ${chalk_1.default.bold(type)} is not supported. Available extension types: ${constants_1.EXTENSION_TYPES.map((t) => chalk_1.default.bold.magenta(t)).join(', ')}.`, 'error');
        process.exit(1);
    }
    if (targetDir.length === 0) {
        (0, logger_1.log)(`Extension name can not be empty.`, 'error');
        process.exit(1);
    }
    if (await fs_extra_1.default.pathExists(targetPath)) {
        const info = await fs_extra_1.default.stat(targetPath);
        if (!info.isDirectory()) {
            (0, logger_1.log)(`Destination ${chalk_1.default.bold(targetDir)} already exists and is not a directory.`, 'error');
            process.exit(1);
        }
        const files = await fs_extra_1.default.readdir(targetPath);
        if (files.length > 0) {
            (0, logger_1.log)(`Destination ${chalk_1.default.bold(targetDir)} already exists and is not empty.`, 'error');
            process.exit(1);
        }
    }
    if (!(0, languages_1.isLanguage)(options.language)) {
        (0, logger_1.log)(`Language ${chalk_1.default.bold(options.language)} is not supported. Available languages: ${constants_1.EXTENSION_LANGUAGES.map((t) => chalk_1.default.bold.magenta(t)).join(', ')}.`, 'error');
        process.exit(1);
    }
    const spinner = (0, ora_1.default)(chalk_1.default.bold('Scaffolding Directus extension...')).start();
    await fs_extra_1.default.ensureDir(targetPath);
    await fs_extra_1.default.copy(path_1.default.join(TEMPLATE_PATH, 'common', options.language), targetPath);
    await fs_extra_1.default.copy(path_1.default.join(TEMPLATE_PATH, type, options.language), targetPath);
    await (0, rename_map_1.default)(targetPath, (name) => (name.startsWith('_') ? `.${name.substring(1)}` : null));
    const entryPath = (0, utils_1.isIn)(type, constants_1.HYBRID_EXTENSION_TYPES) ? { app: 'dist/app.js', api: 'dist/api.js' } : 'dist/index.js';
    const sourcePath = (0, utils_1.isIn)(type, constants_1.HYBRID_EXTENSION_TYPES)
        ? { app: `src/app.${(0, languages_1.languageToShort)(options.language)}`, api: `src/api.${(0, languages_1.languageToShort)(options.language)}` }
        : `src/index.${(0, languages_1.languageToShort)(options.language)}`;
    const packageManifest = {
        name: constants_1.EXTENSION_NAME_REGEX.test(name) ? name : `directus-extension-${name}`,
        version: '1.0.0',
        keywords: ['directus', 'directus-extension', `directus-custom-${type}`],
        [constants_1.EXTENSION_PKG_KEY]: {
            type,
            path: entryPath,
            source: sourcePath,
            host: `^${pkg.version}`,
        },
        scripts: {
            build: 'directus-extension build',
            dev: 'directus-extension build -w --no-minify',
        },
        devDependencies: await getPackageDeps(type, options.language),
    };
    await fs_extra_1.default.writeJSON(path_1.default.join(targetPath, 'package.json'), packageManifest, { spaces: '\t' });
    await (0, execa_1.default)('npm', ['install'], { cwd: targetPath });
    spinner.succeed(chalk_1.default.bold('Done'));
    (0, logger_1.log)(`
Your ${type} extension has been created at ${chalk_1.default.green(targetPath)}

To start developing, run:
  ${chalk_1.default.blue('cd')} ${targetDir}
  ${chalk_1.default.blue('npm run')} dev

and then to build for production, run:
  ${chalk_1.default.blue('npm run')} build
	`);
}
exports.default = create;
async function getPackageDeps(type, language) {
    return {
        '@directus/extensions-sdk': pkg.version,
        ...(language === 'typescript'
            ? {
                ...((0, utils_1.isIn)(type, constants_1.API_OR_HYBRID_EXTENSION_TYPES)
                    ? { '@types/node': `^${await (0, get_package_version_1.default)('@types/node')}` }
                    : {}),
                typescript: `^${await (0, get_package_version_1.default)('typescript')}`,
            }
            : {}),
        ...((0, utils_1.isIn)(type, constants_1.APP_OR_HYBRID_EXTENSION_TYPES) ? { vue: `^${await (0, get_package_version_1.default)('vue')}` } : {}),
    };
}
